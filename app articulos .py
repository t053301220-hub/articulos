import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from io import BytesIO
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
import datetime

# =============================
# CONFIGURACI√ìN BASE
# =============================
st.set_page_config(page_title="Asistente de B√∫squeda Cient√≠fica", layout="wide")
st.title("üî¨ Asistente de B√∫squeda Cient√≠fica")

# URL del Webhook de n8n
WEBHOOK_URL = "https://locopro0628.app.n8n.cloud/webhook/busqueda-cientifica"

# =============================
# FUNCIONES AUXILIARES
# =============================

def generar_pdf(df, tema, resumen_estadistico):
    """Genera un PDF con los art√≠culos y resumen estad√≠stico."""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    content = []

    content.append(Paragraph(f"Asistente de B√∫squeda Cient√≠fica", styles["Title"]))
    content.append(Paragraph(f"Tema: <b>{tema}</b>", styles["Heading2"]))
    content.append(Spacer(1, 10))

    # Resumen estad√≠stico
    content.append(Paragraph("üìä Resumen estad√≠stico:", styles["Heading3"]))
    for k, v in resumen_estadistico.items():
        content.append(Paragraph(f"{k}: {v}", styles["Normal"]))
    content.append(Spacer(1, 10))

    # Tabla de art√≠culos
    content.append(Paragraph("üìö Art√≠culos encontrados:", styles["Heading3"]))
    data = [["T√≠tulo", "Autores", "A√±o", "Fuente"]]
    for _, r in df.iterrows():
        data.append([r["titulo"], r["autores"], str(r["a√±o"]), r["fuente"]])
    table = Table(data, colWidths=[200, 150, 50, 80])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
        ('GRID', (0,0), (-1,-1), 0.5, colors.grey)
    ]))
    content.append(table)
    doc.build(content)
    buffer.seek(0)
    return buffer


def mostrar_estadistica(df):
    """Muestra estad√≠sticas descriptivas en Streamlit."""
    st.subheader("üìä Estad√≠sticas descriptivas")

    c1, c2, c3 = st.columns(3)
    c1.metric("Total art√≠culos", len(df))
    c2.metric("Fuentes √∫nicas", df["fuente"].nunique())
    c3.metric("A√±os distintos", df["a√±o"].nunique())

    df["a√±o"] = pd.to_numeric(df["a√±o"], errors="coerce")

    st.markdown("#### Distribuci√≥n de publicaciones por a√±o")
    st.plotly_chart(px.histogram(df, x="a√±o", nbins=15, title="Publicaciones por a√±o"), use_container_width=True)

    if df["a√±o"].notna().any():
        a√±o_mas = int(df["a√±o"].mode().iloc[0])
        total = (df["a√±o"] == a√±o_mas).sum()
        st.info(f"üìÖ A√±o con m√°s publicaciones: {a√±o_mas} ({total} art√≠culos)")

# =============================
# INTERFAZ PRINCIPAL
# =============================

with st.form("busqueda_form"):
    tema = st.text_input("üìö Tema de investigaci√≥n", "")
    c1, c2 = st.columns(2)
    with c1:
        fecha_inicio = st.date_input("üìÖ Fecha inicio", datetime.date(2020,1,1))
    with c2:
        fecha_fin = st.date_input("üìÖ Fecha fin", datetime.date.today())
    idioma = st.selectbox("üåê Idioma", ["en,es", "en", "es"])
    buscar = st.form_submit_button("üîç Buscar art√≠culos")

if buscar and tema:
    with st.spinner("Buscando art√≠culos..."):
        try:
            payload = {
                "tema": tema,
                "fechaInicio": str(fecha_inicio),
                "fechaFin": str(fecha_fin),
                "idioma": idioma
            }
            res = requests.post(WEBHOOK_URL, json=payload)
            res.raise_for_status()
            data = res.json()

            if isinstance(data, list):
                articles = [a.get("json", a) for a in data]
            else:
                articles = []

            if not articles:
                st.warning("‚ö†Ô∏è No se encontraron art√≠culos para ese tema.")
            else:
                df = pd.DataFrame(articles)
                st.success(f"‚úÖ {len(df)} art√≠culos encontrados para '{tema}'")

                # Mostrar art√≠culos
                for _, r in df.iterrows():
                    with st.expander(f"üìÑ {r['titulo']} ({r['a√±o']})"):
                        st.markdown(f"**Autores:** {r['autores']}")
                        st.markdown(f"**Fuente:** {r['fuente']}")
                        st.markdown(f"**Resumen:** {r['resumen'][:500]}...")
                        if r.get("url"):
                            st.markdown(f"[üîó Ver art√≠culo completo]({r['url']})", unsafe_allow_html=True)

                # Estad√≠sticas
                mostrar_estadistica(df)

                # PDF
                resumen = {
                    "Art√≠culos encontrados": len(df),
                    "Fuentes √∫nicas": df["fuente"].nunique(),
                    "A√±os distintos": df["a√±o"].nunique()
                }
                pdf = generar_pdf(df, tema, resumen)
                st.download_button(
                    "üì• Descargar PDF de resultados",
                    data=pdf,
                    file_name=f"busqueda_{tema}.pdf",
                    mime="application/pdf"
                )

        except Exception as e:
            st.error(f"‚ùå Error al conectar con el servicio: {e}")
