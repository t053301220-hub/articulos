# =============================
# app.py ‚Äî Asistente de B√∫squeda Cient√≠fica
# =============================
import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from io import BytesIO
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
import datetime
import json

# =============================
# CONFIGURACI√ìN BASE
# =============================
st.set_page_config(page_title="Asistente de B√∫squeda Cient√≠fica", layout="wide")
st.title("üî¨ Asistente de B√∫squeda Cient√≠fica")

# Supabase (desde Settings > Secrets en Streamlit Cloud)
SUPABASE_URL = st.secrets["supabase_url"]
SUPABASE_KEY = st.secrets["supabase_key"]

# URL del webhook n8n
WEBHOOK_URL = "https://eriks20252.app.n8n.cloud/webhook/busqueda-cientifica"

# =============================
# FUNCIONES AUXILIARES
# =============================
def generar_pdf(df, tema, resumen_estadistico):
    """Genera un PDF con los art√≠culos y resumen estad√≠stico."""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    content = []

    content.append(Paragraph("üî¨ Asistente de B√∫squeda Cient√≠fica", styles["Title"]))
    content.append(Paragraph(f"Tema: <b>{tema}</b>", styles["Heading2"]))
    content.append(Spacer(1, 10))

    content.append(Paragraph("üìä Resumen estad√≠stico:", styles["Heading3"]))
    for k, v in resumen_estadistico.items():
        content.append(Paragraph(f"{k}: {v}", styles["Normal"]))
    content.append(Spacer(1, 10))

    data = [["T√≠tulo", "Autores", "A√±o", "Fuente"]]
    for _, r in df.iterrows():
        data.append([r["titulo"], r["autores"], str(r["a√±o"]), r["fuente"]])
    table = Table(data, colWidths=[200, 150, 50, 80])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold')
    ]))
    content.append(table)
    doc.build(content)
    buffer.seek(0)
    return buffer


def mostrar_estadistica(df):
    """Genera estad√≠sticas descriptivas visuales dentro de Streamlit."""
    st.subheader("üìä Estad√≠stica descriptiva")

    c1, c2, c3 = st.columns(3)
    c1.metric("Total art√≠culos", len(df))
    c2.metric("Fuentes √∫nicas", df["fuente"].nunique())
    c3.metric("A√±os distintos", df["a√±o"].nunique())

    df["a√±o"] = pd.to_numeric(df["a√±o"], errors="coerce")

    st.markdown("#### Distribuci√≥n de publicaciones por a√±o")
    st.plotly_chart(px.histogram(df, x="a√±o", nbins=15, title="Publicaciones por a√±o"), use_container_width=True)

    if "palabras_clave" in df.columns:
        keywords = []
        for kw in df["palabras_clave"].dropna():
            keywords.extend([k.strip() for k in kw.split(",") if k.strip()])
        if keywords:
            top_kw = pd.Series(keywords).value_counts().head(10)
            st.markdown("#### Palabras clave m√°s frecuentes")
            st.plotly_chart(px.bar(
                x=top_kw.index, y=top_kw.values, title="Palabras clave m√°s frecuentes"
            ), use_container_width=True)

# =============================
# INTERFAZ PRINCIPAL
# =============================
st.markdown("#### Introduce los par√°metros de b√∫squeda")

tema = st.text_input("üìö Tema de investigaci√≥n")
col1, col2 = st.columns(2)
with col1:
    fecha_inicio = st.date_input("üìÖ Fecha inicio", datetime.date(2020, 1, 1))
with col2:
    fecha_fin = st.date_input("üìÖ Fecha fin", datetime.date.today())
idioma = st.selectbox("üåê Idioma", ["en,es", "en", "es"])

if st.button("üîç Buscar art√≠culos"):
    if not tema:
        st.warning("Por favor, ingresa un tema de investigaci√≥n.")
    else:
        with st.spinner("Buscando art√≠culos..."):
            try:
                payload = {
                    "tema": tema,
                    "fechaInicio": str(fecha_inicio),
                    "fechaFin": str(fecha_fin),
                    "idioma": idioma
                }
                res = requests.post(WEBHOOK_URL, json=payload)
                if res.status_code != 200:
                    st.error(f"‚ùå Error del servidor ({res.status_code}): {res.text}")
                else:
                    data = res.json()
                    articles = [a for a in data if isinstance(a, dict) and "titulo" in a and a["titulo"]]

                    if not articles:
                        st.warning("No se encontraron art√≠culos v√°lidos.")
                    else:
                        df = pd.DataFrame(articles)
                        st.success(f"‚úÖ {len(df)} art√≠culos encontrados para '{tema}'")

                        # Mostrar art√≠culos
                        for _, r in df.iterrows():
                            with st.expander(f"üìÑ {r['titulo']} ({r.get('a√±o', 'N/A')})"):
                                st.markdown(f"**Autores:** {r.get('autores', 'Desconocido')}")
                                st.markdown(f"**Fuente:** {r.get('fuente', 'N/A')}")
                                resumen = r.get('resumen', 'Sin resumen disponible')
                                st.markdown(f"**Resumen:** {resumen[:500]}...")
                                if r.get("url"):
                                    st.markdown(f"[üîó Ver art√≠culo]({r['url']})", unsafe_allow_html=True)

                        # Estad√≠sticas
                        mostrar_estadistica(df)

                        # Resumen y PDF
                        resumen = {
                            "Art√≠culos encontrados": len(df),
                            "Fuentes √∫nicas": df["fuente"].nunique(),
                            "A√±os distintos": df["a√±o"].nunique()
                        }
                        pdf_buffer = generar_pdf(df, tema, resumen)
                        st.download_button(
                            label="üì• Descargar PDF de resultados",
                            data=pdf_buffer,
                            file_name=f"busqueda_{tema}.pdf",
                            mime="application/pdf"
                        )

            except Exception as e:
                st.error(f"‚ùå Error al buscar art√≠culos: {e}")
