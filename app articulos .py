# =============================
# app.py ‚Äî Asistente de B√∫squeda Cient√≠fica con guardado en Supabase
# =============================
import streamlit as st
import requests
import pandas as pd
from supabase import create_client, Client
import datetime
import plotly.express as px
from io import BytesIO
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet

# =============================
# CONFIGURACI√ìN BASE
# =============================
st.set_page_config(page_title="Asistente de B√∫squeda Cient√≠fica", layout="wide")
st.title("üî¨ Asistente de B√∫squeda Cient√≠fica")

# === Conexi√≥n a Supabase ===
url = st.secrets["supabase"]["supabase_url"]
key = st.secrets["supabase"]["supabase_key"]
supabase: Client = create_client(url, key)

# === URL de tu webhook activo en n8n ===
WEBHOOK_URL = "https://eriks20252.app.n8n.cloud/webhook/busqueda-cientifica"

# =============================
# FUNCIONES AUXILIARES
# =============================

def guardar_en_supabase(df):
    """Guarda los art√≠culos en la tabla 'articulos' de Supabase."""
    try:
        data_list = df.to_dict(orient="records")
        for articulo in data_list:
            articulo["fecha_busqueda"] = datetime.datetime.utcnow().isoformat()
            supabase.table("articulos").insert(articulo).execute()
        st.success(f"üóÉÔ∏è {len(data_list)} art√≠culos guardados correctamente en Supabase.")
    except Exception as e:
        st.error(f"‚ùå Error al guardar en Supabase: {e}")

def generar_pdf(df, tema, resumen_estadistico):
    """Genera un PDF con resumen estad√≠stico y art√≠culos."""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    content = []

    content.append(Paragraph("üî¨ Asistente de B√∫squeda Cient√≠fica", styles["Title"]))
    content.append(Paragraph(f"Tema: <b>{tema}</b>", styles["Heading2"]))
    content.append(Spacer(1, 10))

    content.append(Paragraph("üìä Resumen estad√≠stico:", styles["Heading3"]))
    for k, v in resumen_estadistico.items():
        content.append(Paragraph(f"{k}: {v}", styles["Normal"]))
    content.append(Spacer(1, 10))

    data = [["T√≠tulo", "Autores", "A√±o", "Fuente"]]
    for _, r in df.iterrows():
        data.append([
            str(r.get("titulo", "")),
            str(r.get("autores", "")),
            str(r.get("a√±o", "")),
            str(r.get("fuente", ""))
        ])
    table = Table(data, colWidths=[200, 150, 50, 80])
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
    ]))
    content.append(table)
    doc.build(content)
    buffer.seek(0)
    return buffer

def mostrar_estadistica(df):
    """Muestra estad√≠sticas descriptivas visuales."""
    st.subheader("üìä Estad√≠stica descriptiva")

    c1, c2, c3 = st.columns(3)
    c1.metric("Total art√≠culos", len(df))
    c2.metric("Fuentes √∫nicas", df["fuente"].nunique() if "fuente" in df else 0)
    c3.metric("A√±os distintos", df["a√±o"].nunique() if "a√±o" in df else 0)

    if "a√±o" in df:
        df["a√±o"] = pd.to_numeric(df["a√±o"], errors="coerce")
        st.plotly_chart(px.histogram(df, x="a√±o", nbins=15, title="üìà Publicaciones por a√±o"), use_container_width=True)

    if "palabras_clave" in df:
        palabras = []
        for kw in df["palabras_clave"].dropna():
            palabras.extend([k.strip() for k in str(kw).split(",") if k.strip()])
        if palabras:
            top_kw = pd.Series(palabras).value_counts().head(10)
            st.plotly_chart(
                px.bar(x=top_kw.index, y=top_kw.values, title="üîë Palabras clave m√°s frecuentes"),
                use_container_width=True,
            )

# =============================
# INTERFAZ PRINCIPAL
# =============================
st.markdown("#### Ingresa los par√°metros de b√∫squeda")

tema = st.text_input("üìö Tema de investigaci√≥n")
col1, col2 = st.columns(2)
with col1:
    fecha_inicio = st.date_input("üìÖ Fecha inicio", datetime.date(2020, 1, 1))
with col2:
    fecha_fin = st.date_input("üìÖ Fecha fin", datetime.date.today())
idioma = st.selectbox("üåê Idioma", ["es,en", "es", "en"])

if st.button("üîç Buscar art√≠culos"):
    if not tema:
        st.warning("Por favor, escribe un tema para buscar.")
    else:
        with st.spinner("Buscando art√≠culos..."):
            try:
                payload = {
                    "tema": tema,
                    "fechaInicio": str(fecha_inicio),
                    "fechaFin": str(fecha_fin),
                    "idioma": idioma
                }

                res = requests.post(WEBHOOK_URL, json=payload)
                if res.status_code != 200:
                    st.error(f"‚ùå Error del servidor ({res.status_code}) ‚Üí {res.text}")
                else:
                    data = res.json()
                    if not data or not isinstance(data, list):
                        st.warning("No se encontraron art√≠culos.")
                    else:
                        df = pd.DataFrame(data)
                        st.success(f"‚úÖ {len(df)} art√≠culos encontrados para '{tema}'")

                        # === GUARDAR EN SUPABASE ===
                        guardar_en_supabase(df)

                        # === MOSTRAR RESULTADOS ===
                        for _, r in df.iterrows():
                            titulo = r.get("titulo", "Sin t√≠tulo")
                            a√±o = r.get("a√±o", "N/A")
                            with st.expander(f"üìÑ {titulo} ({a√±o})"):
                                st.markdown(f"**Autores:** {r.get('autores', 'No especificado')}")
                                st.markdown(f"**Fuente:** {r.get('fuente', 'Desconocida')}")
                                st.markdown(f"**Publicaci√≥n / Venue:** {r.get('venue', 'No registrado')}")
                                st.markdown(f"**Objetivo:** {r.get('objetivo', 'No especificado')}")
                                st.markdown(f"**Metodolog√≠a:** {r.get('metodologia', 'No especificada')}")
                                st.markdown(f"**Palabras clave:** {r.get('palabras_clave', 'No registradas')}")
                                resumen = r.get("resumen", "Sin resumen disponible")
                                st.markdown(f"**Resumen:** {resumen[:800]}...")
                                if r.get("url"):
                                    st.markdown(f"[üîó Ver art√≠culo completo]({r['url']})", unsafe_allow_html=True)

                        # === ESTAD√çSTICAS ===
                        mostrar_estadistica(df)

                        # === PDF ===
                        resumen = {
                            "Art√≠culos encontrados": len(df),
                            "Fuentes √∫nicas": df["fuente"].nunique() if "fuente" in df else 0,
                            "A√±os distintos": df["a√±o"].nunique() if "a√±o" in df else 0,
                        }
                        pdf_buffer = generar_pdf(df, tema, resumen)
                        st.download_button(
                            label="üì• Descargar PDF de resultados",
                            data=pdf_buffer,
                            file_name=f"busqueda_{tema}.pdf",
                            mime="application/pdf",
                        )

            except Exception as e:
                st.error(f"‚ùå Error al buscar art√≠culos: {e}")
